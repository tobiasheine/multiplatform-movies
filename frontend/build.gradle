buildscript {
    ext.serialization_version = '0.13.0'
    ext.coroutine_version = '1.3.0'
    ext.ktor_version = '1.2.4'
    ext.sqldelight_version = '1.2.0'
    ext.data_version = '0.0.1'
    ext.stately_version = '0.9.3'

    allprojects {
        repositories {
            google()
            mavenCentral()
            mavenLocal()
            jcenter()
        }
    }

    repositories {
        jcenter()
        google()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:3.4.2'
        classpath 'com.squareup.sqldelight:gradle-plugin:1.2.0'
    }
}

plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.50'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
}

group 'eu.tobiasheine.movies'
version '0.0.1'

apply plugin: 'maven-publish'
apply plugin: 'com.android.library'
apply plugin: 'com.squareup.sqldelight'

kotlin {
    android {
        publishLibraryVariants("release", "debug")
    }
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework {
                baseName = "MoviesFrontend"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
                implementation "io.ktor:ktor-client-core:$ktor_version"
                implementation "io.ktor:ktor-client-json:$ktor_version"
                implementation "io.ktor:ktor-client-serialization:$ktor_version"
                implementation "co.touchlab:stately:$stately_version"
                api "eu.tobiasheine.movies:data:$data_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        androidMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-android:$ktor_version"
                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
                implementation "io.ktor:ktor-client-okhttp:$ktor_version"
                implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
            }
        }
        androidTest {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-test:1.3.50"
                implementation "org.jetbrains.kotlin:kotlin-test-junit:1.3.50"
                implementation "androidx.test:core:1.2.0"
                implementation "androidx.test.ext:junit:1.1.1"
                implementation "org.robolectric:robolectric:4.3"
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
                implementation "io.ktor:ktor-client-ios:$ktor_version"
                implementation "io.ktor:ktor-client-core-native:$ktor_version"
                implementation "io.ktor:ktor-client-json-native:$ktor_version"
                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
                implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
            }
        }
        iosTest {
        }
    }

    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

        inputs.property "mode", mode
        dependsOn kotlin.targets.ios.binaries.getFramework(mode).linkTaskName

        from { kotlin.targets.ios.binaries.getFramework(mode).outputDirectory }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }

    tasks.build.dependsOn packForXCode

    task iosTest {
        def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 11"
        dependsOn 'linkDebugTestIos'
        group = JavaBasePlugin.VERIFICATION_GROUP
        description = "Runs tests for target 'ios' on an iOS simulator"

        doLast {
            def binary = kotlin.targets.ios.binaries.getTest('DEBUG').outputFile
            exec {
                commandLine 'xcrun', 'simctl', 'spawn',  '--standalone', device, binary.absolutePath
            }
        }
    }
    tasks.check.dependsOn iosTest

}

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 24
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
}

sqldelight {
    MoviesDb {
        packageName = "eu.tobiasheine.movies.frontend.db"
    }
}

configurations {
    compileClasspath
}