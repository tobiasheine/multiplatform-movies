plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.3.60'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.60'
}

ext.serialization_version = '0.14.0'
ext.coroutine_version = '1.3.2-native-mt-1'
ext.ktor_version = '1.2.4'
ext.coroutineWorker_version = '0.3.0'
ext.data_version = '0.0.1'

repositories {
    maven { url 'https://dl.bintray.com/kotlin/kotlin-eap' }
    mavenCentral()
    mavenLocal()
    jcenter()
}
group 'eu.tobiasheine.movies'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    // This is for iPhone emulator
    // Switch here to iosArm64 (or iosArm32) to build library for iPhone device
    iosX64("ios") {
        binaries {
            framework {
                baseName = "MoviesFrontend"
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"
//                implementation "io.ktor:ktor-client-core:$ktor_version"
//                implementation "io.ktor:ktor-client-json:$ktor_version"
//                implementation "io.ktor:ktor-client-serialization:$ktor_version"
//                implementation "com.autodesk:coroutineworker:$coroutineWorker_version"
                api "eu.tobiasheine.movies:data:$data_version"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib')
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"
                implementation "io.ktor:ktor-client-serialization-jvm:$ktor_version"
//                implementation "io.ktor:ktor-client-core-jvm:$ktor_version"
//                implementation "io.ktor:ktor-client-json-jvm:$ktor_version"
//                implementation "io.ktor:ktor-client-okhttp:$ktor_version"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        iosMain {
            dependencies {
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serialization_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"
//                implementation "io.ktor:ktor-client-ios:$ktor_version"
//                implementation "io.ktor:ktor-client-core-native:$ktor_version"
//                implementation "io.ktor:ktor-client-json-native:$ktor_version"
//                implementation "io.ktor:ktor-client-serialization-native:$ktor_version"
            }
        }
        iosTest {
        }
    }

    task packForXCode(type: Sync) {
        final File frameworkDir = new File(buildDir, "xcode-frameworks")
        final String mode = project.findProperty("CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

        inputs.property "mode", mode
        dependsOn kotlin.targets.ios.binaries.getFramework(mode).linkTaskName

        from { kotlin.targets.ios.binaries.getFramework(mode).outputDirectory }
        into frameworkDir

        doLast {
            new File(frameworkDir, 'gradlew').with {
                text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
                setExecutable(true)
            }
        }
    }

    tasks.build.dependsOn packForXCode
}

configurations {
    compileClasspath
}